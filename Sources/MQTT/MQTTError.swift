//
//  MQTTError.swift
//  swift-mqtt
//
//  Created by supertext on 2024/12/20.
//

import Foundation
import Network


/// MQTTClient errors
public enum MQTTError:Sendable,Equatable, Swift.Error {
    /// client timed out while waiting for response from server
    /// This includes connection timeouts and writing timeouts
    case timeout
    /// client in not connected
    case noConnection
    /// never happen forever
    case neverHappened
    /// You called connect on a client that is already connected to the broker
    case alreadyOpened
    /// Client has already been closedd
    case alreadyClosed
    /// Encode of MQTT packet error or invalid paarameters
    case packetError(Packet)
    /// Decode of MQTT message failed
    case decodeError(Decode)
    /// the server disconnected
    /// the server closed the connection. If this happens during a publish you can resend
    /// the publish packet by reconnecting to server with `cleanSession` set to false.
    case serverClosed(ResultCode.Disconnect)
    /// user closed connectiion
    case clientClosed(ResultCode.Disconnect)
    /// publish failed
    case publishFailed(ResultCode.Puback)
    /// We received an unexpected message while connecting
    /// result code may be  `ResultCode.ConnectV3` or `ResultCode.ConnectV3` or `nil`
    case connectFailed(ResultCode? = nil)
    /// received unexpected message from broker
    case unexpectMessage
    /// Packet error incomplete packet
    case incompletePacket
    /// Auth packets sent without authWorkflow being supplied
    case authflowRequired
    
}
extension MQTTError{
    /// Errors generated by bad packets sent by the client
    public enum Packet:Sendable,Equatable {
        case badParameter
        /// Packet sent contained invalid entries
        /// QoS is not accepted by this connection as it is greater than the accepted value
        case qosInvalid
        /// publish messages on this connection do not support the retain flag
        case retainUnavailable
        /// subscribe/unsubscribe packet requires at least one topic
        case atLeastOneTopicRequired
        /// topic alias is greater than server maximum topic alias or the alias is zero
        case topicAliasOutOfRange
        /// invalid topic name
        case invalidTopicName
        /// client to server publish packets cannot include a subscription identifier
        case publishIncludesSubscription
    }
}


extension MQTTError{
    public enum Decode:Sendable,Equatable{
        /// some network error
        case networkError(_ error:NWError)
        /// Read variable length overflow
        case varintOverflow
        /// Packet received contained invalid tokens
        case unexpectedTokens
        /// got unexpected data length when read
        case unexpectedDataLength
        /// Failed to recognise the packet control type
        case unrecognisedPacketType
    }
}
